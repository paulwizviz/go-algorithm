package bubble

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func bubbleEx1(data []int) []int {
	n := len(data)
	for i := 0; i < n; i++ {
		for j := 0; j < n-i-1; j++ {
			if data[j] > data[j+1] {
				data[j], data[j+1] = data[j+1], data[j]
			}
		}
	}
	return data
}

var tcs = []struct {
	input []int
	want  []int
}{
	{
		input: []int{85, 12, 98, 45, 67, 3, 72, 29, 56, 91},
		want:  []int{3, 12, 29, 45, 56, 67, 72, 85, 91, 98},
	},
	{
		input: []int{345, 123, 876, 543, 987, 210, 654, 321, 789, 432, 111, 555, 999, 222, 666, 333, 777, 444, 888, 100, 500, 900, 150, 600, 200, 700, 250, 750, 300, 800, 350, 850, 400, 950, 450, 10, 50, 60, 70, 80, 90, 1000, 5, 15, 25, 35, 45, 55, 65, 75},
		want:  []int{5, 10, 15, 25, 35, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100, 111, 123, 150, 200, 210, 222, 250, 300, 321, 333, 345, 350, 400, 432, 444, 450, 500, 543, 555, 600, 654, 666, 700, 750, 777, 789, 800, 850, 876, 888, 900, 950, 987, 999, 1000},
	},
	{
		input: []int{345, 123, 876, 543, 987, 210, 654, 321, 789, 432, 111, 555, 999, 222, 666, 333, 777, 444, 888, 100, 500, 900, 150, 600, 200, 700, 250, 750, 300, 800, 350, 850, 400, 950, 450, 10, 50, 60, 70, 80, 90, 1000, 5, 15, 25, 35, 45, 55, 65, 75},
		want:  []int{5, 10, 15, 25, 35, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100, 111, 123, 150, 200, 210, 222, 250, 300, 321, 333, 345, 350, 400, 432, 444, 450, 500, 543, 555, 600, 654, 666, 700, 750, 777, 789, 800, 850, 876, 888, 900, 950, 987, 999, 1000},
	},
	{
		input: []int{78, 12, 95, 34, 56, 89, 23, 67, 45, 10, 91, 28, 72, 53, 80, 19, 61, 39, 86, 16, 98, 42, 75, 59, 26, 83, 31, 64, 48, 13, 93, 20, 70, 51, 88, 17, 63, 40, 85, 14, 97, 43, 76, 60, 27, 82, 30, 65, 49, 11, 92, 21, 71, 52, 87, 18, 62, 41, 84, 15, 96, 44, 77, 58, 25, 81, 32, 66, 47, 9, 94, 22, 69, 50, 3, 100, 35, 68, 55, 24, 79, 33, 57, 46, 8, 99, 29, 73, 54, 1, 0, 36, 6, 7, 37, 2, 4, 38, 5},
		want:  []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100},
	},
}

func TestBubble(t *testing.T) {
	for i, tc := range tcs {
		t.Run(fmt.Sprintf("%d Elements", len(tc.input)), func(t *testing.T) {
			got := bubbleEx1(tc.input)
			assert.Equal(t, tc.want, got, fmt.Sprintf("Case: %d Want: %v Got: %v", i, tc.want, got))
		})
	}
}

func BenchmarkEx1(b *testing.B) {
	for _, tc := range tcs {
		b.Run(fmt.Sprintf("%d Elements", len(tc.input)), func(b *testing.B) {
			for count := 0; count < b.N; count++ {
				bubbleEx1(tc.input)
			}
		})
	}
}
